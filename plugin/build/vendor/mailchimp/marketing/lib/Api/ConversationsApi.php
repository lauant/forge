<?php

/**
 * ConversationsApi
 * PHP version 5
 *
 * @category Class
 * @package  MailchimpMarketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 * Mailchimp Marketing API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.25
 * Contact: apihelp@mailchimp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
namespace Lauant\MCD\MailchimpMarketing\Api;

use Lauant\MCD\GuzzleHttp\Client;
use Lauant\MCD\GuzzleHttp\ClientInterface;
use Lauant\MCD\GuzzleHttp\Exception\RequestException;
use Lauant\MCD\GuzzleHttp\Psr7\MultipartStream;
use Lauant\MCD\GuzzleHttp\Psr7\Request;
use Lauant\MCD\GuzzleHttp\RequestOptions;
use Lauant\MCD\MailchimpMarketing\ApiException;
use Lauant\MCD\MailchimpMarketing\Configuration;
use Lauant\MCD\MailchimpMarketing\HeaderSelector;
use Lauant\MCD\MailchimpMarketing\ObjectSerializer;
class ConversationsApi
{
    protected $client;
    protected $config;
    protected $headerSelector;
    public function __construct(\Lauant\MCD\MailchimpMarketing\Configuration $config = null)
    {
        $this->client = new \Lauant\MCD\GuzzleHttp\Client(['defaults' => ['timeout' => 120.0]]);
        $this->headerSelector = new \Lauant\MCD\MailchimpMarketing\HeaderSelector();
        $this->config = $config ?: new \Lauant\MCD\MailchimpMarketing\Configuration();
    }
    public function getConfig()
    {
        return $this->config;
    }
    public function list($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $has_unread_messages = null, $list_id = null, $campaign_id = null)
    {
        $response = $this->listWithHttpInfo($fields, $exclude_fields, $count, $offset, $has_unread_messages, $list_id, $campaign_id);
        return $response;
    }
    public function listWithHttpInfo($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $has_unread_messages = null, $list_id = null, $campaign_id = null)
    {
        $request = $this->listRequest($fields, $exclude_fields, $count, $offset, $has_unread_messages, $list_id, $campaign_id);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (\Lauant\MCD\GuzzleHttp\Exception\RequestException $e) {
                throw $e;
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new \Lauant\MCD\MailchimpMarketing\ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            $content = \json_decode($content);
            return $content;
        } catch (\Lauant\MCD\MailchimpMarketing\ApiException $e) {
            throw $e->getResponseBody();
        }
    }
    protected function listRequest($fields = null, $exclude_fields = null, $count = '10', $offset = '0', $has_unread_messages = null, $list_id = null, $campaign_id = null)
    {
        if ($count !== null && $count > 1000) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling ConversationsApi., must be smaller than or equal to 1000.');
        }
        $resourcePath = '/conversations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        // query params
        if (\is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else {
            if ($fields !== null) {
                $queryParams['fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($fields);
            }
        }
        // query params
        if (\is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = $exclude_fields;
        } else {
            if ($exclude_fields !== null) {
                $queryParams['exclude_fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($exclude_fields);
            }
        }
        // query params
        if ($count !== null) {
            $queryParams['count'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($has_unread_messages !== null) {
            $queryParams['has_unread_messages'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($has_unread_messages);
        }
        // query params
        if ($list_id !== null) {
            $queryParams['list_id'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($list_id);
        }
        // query params
        if ($campaign_id !== null) {
            $queryParams['campaign_id'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($campaign_id);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(['application/json', 'application/problem+json']);
        } else {
            $headers = $this->headerSelector->selectHeaders(['application/json', 'application/problem+json'], ['application/json']);
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;
            if ($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($httpBody);
                }
                if (\is_array($httpBody)) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode(\Lauant\MCD\MailchimpMarketing\ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValue];
                }
                $httpBody = new \Lauant\MCD\GuzzleHttp\Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($formParams);
            } else {
                $httpBody = \Lauant\MCD\GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = \array_merge($defaultHeaders, $headerParams, $headers);
        $query = \Lauant\MCD\GuzzleHttp\Psr7\build_query($queryParams);
        return new \Lauant\MCD\GuzzleHttp\Psr7\Request('GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    public function get($conversation_id, $fields = null, $exclude_fields = null)
    {
        $response = $this->getWithHttpInfo($conversation_id, $fields, $exclude_fields);
        return $response;
    }
    public function getWithHttpInfo($conversation_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getRequest($conversation_id, $fields, $exclude_fields);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (\Lauant\MCD\GuzzleHttp\Exception\RequestException $e) {
                throw $e;
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new \Lauant\MCD\MailchimpMarketing\ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            $content = \json_decode($content);
            return $content;
        } catch (\Lauant\MCD\MailchimpMarketing\ApiException $e) {
            throw $e->getResponseBody();
        }
    }
    protected function getRequest($conversation_id, $fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || \is_array($conversation_id) && \count($conversation_id) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $conversation_id when calling ');
        }
        $resourcePath = '/conversations/{conversation_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        // query params
        if (\is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else {
            if ($fields !== null) {
                $queryParams['fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($fields);
            }
        }
        // query params
        if (\is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = $exclude_fields;
        } else {
            if ($exclude_fields !== null) {
                $queryParams['exclude_fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($exclude_fields);
            }
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = \str_replace('{' . 'conversation_id' . '}', \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toPathValue($conversation_id), $resourcePath);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(['application/json', 'application/problem+json']);
        } else {
            $headers = $this->headerSelector->selectHeaders(['application/json', 'application/problem+json'], ['application/json']);
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;
            if ($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($httpBody);
                }
                if (\is_array($httpBody)) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode(\Lauant\MCD\MailchimpMarketing\ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValue];
                }
                $httpBody = new \Lauant\MCD\GuzzleHttp\Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($formParams);
            } else {
                $httpBody = \Lauant\MCD\GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = \array_merge($defaultHeaders, $headerParams, $headers);
        $query = \Lauant\MCD\GuzzleHttp\Psr7\build_query($queryParams);
        return new \Lauant\MCD\GuzzleHttp\Psr7\Request('GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    public function getConversationMessages($conversation_id, $fields = null, $exclude_fields = null, $is_read = null, $before_timestamp = null, $since_timestamp = null)
    {
        $response = $this->getConversationMessagesWithHttpInfo($conversation_id, $fields, $exclude_fields, $is_read, $before_timestamp, $since_timestamp);
        return $response;
    }
    public function getConversationMessagesWithHttpInfo($conversation_id, $fields = null, $exclude_fields = null, $is_read = null, $before_timestamp = null, $since_timestamp = null)
    {
        $request = $this->getConversationMessagesRequest($conversation_id, $fields, $exclude_fields, $is_read, $before_timestamp, $since_timestamp);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (\Lauant\MCD\GuzzleHttp\Exception\RequestException $e) {
                throw $e;
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new \Lauant\MCD\MailchimpMarketing\ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            $content = \json_decode($content);
            return $content;
        } catch (\Lauant\MCD\MailchimpMarketing\ApiException $e) {
            throw $e->getResponseBody();
        }
    }
    protected function getConversationMessagesRequest($conversation_id, $fields = null, $exclude_fields = null, $is_read = null, $before_timestamp = null, $since_timestamp = null)
    {
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || \is_array($conversation_id) && \count($conversation_id) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $conversation_id when calling ');
        }
        $resourcePath = '/conversations/{conversation_id}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        // query params
        if (\is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else {
            if ($fields !== null) {
                $queryParams['fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($fields);
            }
        }
        // query params
        if (\is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = $exclude_fields;
        } else {
            if ($exclude_fields !== null) {
                $queryParams['exclude_fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($exclude_fields);
            }
        }
        // query params
        if ($is_read !== null) {
            $queryParams['is_read'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($is_read);
        }
        // query params
        if ($before_timestamp !== null) {
            $queryParams['before_timestamp'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($before_timestamp);
        }
        // query params
        if ($since_timestamp !== null) {
            $queryParams['since_timestamp'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($since_timestamp);
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = \str_replace('{' . 'conversation_id' . '}', \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toPathValue($conversation_id), $resourcePath);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(['application/json', 'application/problem+json']);
        } else {
            $headers = $this->headerSelector->selectHeaders(['application/json', 'application/problem+json'], ['application/json']);
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;
            if ($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($httpBody);
                }
                if (\is_array($httpBody)) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode(\Lauant\MCD\MailchimpMarketing\ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValue];
                }
                $httpBody = new \Lauant\MCD\GuzzleHttp\Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($formParams);
            } else {
                $httpBody = \Lauant\MCD\GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = \array_merge($defaultHeaders, $headerParams, $headers);
        $query = \Lauant\MCD\GuzzleHttp\Psr7\build_query($queryParams);
        return new \Lauant\MCD\GuzzleHttp\Psr7\Request('GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    public function getConversationMessage($conversation_id, $message_id, $fields = null, $exclude_fields = null)
    {
        $response = $this->getConversationMessageWithHttpInfo($conversation_id, $message_id, $fields, $exclude_fields);
        return $response;
    }
    public function getConversationMessageWithHttpInfo($conversation_id, $message_id, $fields = null, $exclude_fields = null)
    {
        $request = $this->getConversationMessageRequest($conversation_id, $message_id, $fields, $exclude_fields);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (\Lauant\MCD\GuzzleHttp\Exception\RequestException $e) {
                throw $e;
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new \Lauant\MCD\MailchimpMarketing\ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            $content = \json_decode($content);
            return $content;
        } catch (\Lauant\MCD\MailchimpMarketing\ApiException $e) {
            throw $e->getResponseBody();
        }
    }
    protected function getConversationMessageRequest($conversation_id, $message_id, $fields = null, $exclude_fields = null)
    {
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || \is_array($conversation_id) && \count($conversation_id) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $conversation_id when calling ');
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || \is_array($message_id) && \count($message_id) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $message_id when calling ');
        }
        $resourcePath = '/conversations/{conversation_id}/messages/{message_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        // query params
        if (\is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else {
            if ($fields !== null) {
                $queryParams['fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($fields);
            }
        }
        // query params
        if (\is_array($exclude_fields)) {
            $queryParams['exclude_fields'] = $exclude_fields;
        } else {
            if ($exclude_fields !== null) {
                $queryParams['exclude_fields'] = \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toQueryValue($exclude_fields);
            }
        }
        // path params
        if ($conversation_id !== null) {
            $resourcePath = \str_replace('{' . 'conversation_id' . '}', \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toPathValue($conversation_id), $resourcePath);
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = \str_replace('{' . 'message_id' . '}', \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toPathValue($message_id), $resourcePath);
        }
        // body params
        $_tempBody = null;
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(['application/json', 'application/problem+json']);
        } else {
            $headers = $this->headerSelector->selectHeaders(['application/json', 'application/problem+json'], ['application/json']);
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;
            if ($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($httpBody);
                }
                if (\is_array($httpBody)) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode(\Lauant\MCD\MailchimpMarketing\ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValue];
                }
                $httpBody = new \Lauant\MCD\GuzzleHttp\Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($formParams);
            } else {
                $httpBody = \Lauant\MCD\GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = \array_merge($defaultHeaders, $headerParams, $headers);
        $query = \Lauant\MCD\GuzzleHttp\Psr7\build_query($queryParams);
        return new \Lauant\MCD\GuzzleHttp\Psr7\Request('GET', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    public function createConversationMessage($conversation_id, $body)
    {
        $response = $this->createConversationMessageWithHttpInfo($conversation_id, $body);
        return $response;
    }
    public function createConversationMessageWithHttpInfo($conversation_id, $body)
    {
        $request = $this->createConversationMessageRequest($conversation_id, $body);
        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (\Lauant\MCD\GuzzleHttp\Exception\RequestException $e) {
                throw $e;
            }
            $statusCode = $response->getStatusCode();
            if ($statusCode < 200 || $statusCode > 299) {
                throw new \Lauant\MCD\MailchimpMarketing\ApiException(\sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            $content = \json_decode($content);
            return $content;
        } catch (\Lauant\MCD\MailchimpMarketing\ApiException $e) {
            throw $e->getResponseBody();
        }
    }
    protected function createConversationMessageRequest($conversation_id, $body)
    {
        // verify the required parameter 'conversation_id' is set
        if ($conversation_id === null || \is_array($conversation_id) && \count($conversation_id) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $conversation_id when calling ');
        }
        // verify the required parameter 'body' is set
        if ($body === null || \is_array($body) && \count($body) === 0) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling ');
        }
        $resourcePath = '/conversations/{conversation_id}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = \false;
        // path params
        if ($conversation_id !== null) {
            $resourcePath = \str_replace('{' . 'conversation_id' . '}', \Lauant\MCD\MailchimpMarketing\ObjectSerializer::toPathValue($conversation_id), $resourcePath);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(['application/json', 'application/problem+json']);
        } else {
            $headers = $this->headerSelector->selectHeaders(['application/json', 'application/problem+json'], ['application/json']);
        }
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody;
            if ($headers['Content-Type'] === 'application/json') {
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($httpBody);
                }
                if (\is_array($httpBody)) {
                    $httpBody = \Lauant\MCD\GuzzleHttp\json_encode(\Lauant\MCD\MailchimpMarketing\ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = ['name' => $formParamName, 'contents' => $formParamValue];
                }
                $httpBody = new \Lauant\MCD\GuzzleHttp\Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \Lauant\MCD\GuzzleHttp\json_encode($formParams);
            } else {
                $httpBody = \Lauant\MCD\GuzzleHttp\Psr7\build_query($formParams);
            }
        }
        // Basic Authentication
        if (!empty($this->config->getUsername()) && !empty($this->config->getPassword())) {
            $headers['Authorization'] = 'Basic ' . \base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // OAuth Authentication
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }
        $headers = \array_merge($defaultHeaders, $headerParams, $headers);
        $query = \Lauant\MCD\GuzzleHttp\Psr7\build_query($queryParams);
        return new \Lauant\MCD\GuzzleHttp\Psr7\Request('POST', $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''), $headers, $httpBody);
    }
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[\Lauant\MCD\GuzzleHttp\RequestOptions::DEBUG] = \fopen($this->config->getDebugFile(), 'a');
            if (!$options[\Lauant\MCD\GuzzleHttp\RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }
        return $options;
    }
}
